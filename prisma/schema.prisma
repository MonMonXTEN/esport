// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  staff
  admin
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  username  String   @unique
  email     String?  @unique
  password  String
  role      Role     @default(staff)
  matches   Match[]  @relation("referee")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TournamentStatus {
  DRAFT
  LIVE
  FINISHED
}

enum MatchStatus {
  PENDING
  DONE
}

enum Round {
  R32
  R16
  QF
  SF
  THIRD_PLACE
  FINAL
}

model Team {
  id              Int              @id @default(autoincrement())
  name            String
  status          Boolean          @default(true) // เช็คมาหรือไม่มา
  blueMatches     Match[]          @relation("blue")
  redMatches      Match[]          @relation("red")
  winnerMatches   Match[]          @relation("winner")
  signatures      Signature[]
  tournamentTeams TournamentTeam[]
}

model Tournament {
  id     Int              @id @default(autoincrement())
  name   String
  status TournamentStatus @default(DRAFT)
  active Boolean          @default(true)

  tournamentTeams TournamentTeam[]
  matches         Match[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model TournamentTeam {
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId Int
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       Int

  @@id([tournamentId, teamId])
}

model Match {
  id           Int         @id @default(autoincrement())
  tournament   Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId Int
  round        Round
  sequence     Int // ลำดับช่องใน bracket
  bestOf       Int // 1, 3, 5
  status       MatchStatus @default(PENDING)
  blueTeam     Team?       @relation("blue", fields: [blueTeamId], references: [id])
  blueTeamId   Int?
  redTeam      Team?       @relation("red", fields: [redTeamId], references: [id])
  redTeamId    Int?
  winnerTeam   Team?       @relation("winner", fields: [winnerTeamId], references: [id])
  winnerTeamId Int?
  blueScore    Int         @default(0)
  redScore     Int         @default(0)

  // self-relation ใช้อ้างอิงตัวเองเพื่อส่งไปยังแมตช์ต่อไป
  parentMatch   Match?  @relation("children", fields: [parentMatchId], references: [id])
  parentMatchId Int?
  children      Match[] @relation("children")

  // relation สำหรับทีมตกรอบ SF
  thirdPlaceMatch   Match?  @relation("loserToThird", fields: [thirdPlaceMatchId], references: [id])
  thirdPlaceMatchId Int?
  losersFromSF      Match[] @relation("loserToThird")

  referee    User?       @relation("referee", fields: [refereeId], references: [id])
  refereeId  Int? // ผู้รับผิดชอบ
  signatures Signature[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([tournamentId, round, sequence])
}

model Signature {
  id      Int   @id @default(autoincrement())
  match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  matchId Int

  team   Team @relation(fields: [teamId], references: [id])
  teamId Int

  imageUrl String
  createAt DateTime @default(now())

  @@unique([matchId, teamId])
}
